class Solution {
    public List<Integer> topKFrequent(int[] nums, int k) {
        List<Integer> res=new ArrayList<>();
        if(nums.length==0)
            return res;
        
        if(nums.length==1 ){
            res.add(nums[0]);
            return res;
        }
        
        HashMap<Integer,Integer> map=new HashMap<>();
        Arrays.sort(nums);
        int count=1;
        for(int i=1;i<nums.length;i++){
            if(nums[i]==nums[i-1]){
                count++;
            }else{
                map.put(nums[i-1],count);
                count=1;
            }
            
            if(i==nums.length-1){
                map.put(nums[i],count);
            }
        }
        
        HashMap<Integer,Integer> set=mapSortbyValues(map);
        int a=0;
        for(Map.Entry<Integer,Integer> aa: set.entrySet()){
            res.add(aa.getKey());
            a++;
            if(a>=k)
                break;
        }
        
        return res;
    }
    
    private HashMap<Integer,Integer> mapSortbyValues(HashMap<Integer,Integer> map){
        List<Map.Entry<Integer,Integer>> list = new LinkedList<Map.Entry<Integer,Integer>>(map.entrySet());
        
        Collections.sort(list,new Comparator<Map.Entry<Integer,Integer>>(){
            public int compare(Map.Entry<Integer,Integer> o1, Map.Entry<Integer,Integer> o2){
                return (o2.getValue()).compareTo(o1.getValue());
            }
        });
        
        HashMap<Integer,Integer> res=new LinkedHashMap<>();
        for(Map.Entry<Integer,Integer> aa:list){
            res.put(aa.getKey(),aa.getValue());
        }
        return res;
    }
}
