/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Codec {

    // Encodes a tree to a single string.
    public String serialize(TreeNode root) {
        if(root==null)
            return "null";
        
        Queue<TreeNode> queue = new LinkedList<TreeNode>();
        StringBuilder sb = new StringBuilder();
        sb.append(root.val);
        queue.add(root.left);
        queue.add(root.right);
        
        while(!queue.isEmpty()){
            TreeNode temp = queue.poll();
            sb.append(",");
            if(temp==null){
                sb.append("null");
            }else{
                sb.append(temp.val);
                queue.add(temp.left);
                queue.add(temp.right);
            }
        }
        // System.out.println(sb.toString());
        return sb.toString();
    }

    // Decodes your encoded data to tree.
    public TreeNode deserialize(String data) {
        if(data == "null" || data==""){
            return null;   
        }
        
        String[] vals = data.split(",");
        // int numberofnode = vals.length/2;
        if(vals[0].equals("null") || vals[0].equals(""))
            return null;
        TreeNode root = new TreeNode(Integer.parseInt(vals[0]));
        Queue<TreeNode> queue = new LinkedList<TreeNode>();
        
        queue.add(root);
        int number=1;
        while(!queue.isEmpty()){
            TreeNode temp = queue.poll();
            if(!vals[number].equals("null")){
                // System.out.println(vals[number]);
                TreeNode newleft = new TreeNode(Integer.parseInt(vals[number++]));
                temp.left = newleft;
                queue.add(newleft);
            }else{
                number++;
            }
            
            if(!vals[number].equals("null")){
                TreeNode newright = new TreeNode(Integer.parseInt(vals[number++]));
                temp.right = newright;
                queue.add(newright);
            }else{
                number++;
            }
        }
        
        return root;
    }
}

// Your Codec object will be instantiated and called as such:
// Codec codec = new Codec();
// codec.deserialize(codec.serialize(root));
