class Solution {
    public boolean canFinish(int numCourses, int[][] prerequisites) {
        List[] edges = new ArrayList[numCourses];
        int[] degrees = new int[numCourses];

        for(int i =0;i<numCourses;i++){
            edges[i] = new ArrayList<Integer>();
            degrees[i]=0;
        }
        
        for(int i=0;i<prerequisites.length;i++){
            degrees[prerequisites[i][0]]++;
            edges[prerequisites[i][1]].add(prerequisites[i][0]);
        }
        
        Queue<Integer> queue = new LinkedList<Integer>();
        
        for(int i=0;i<numCourses;i++){
            if(degrees[i]==0){
                queue.add(i);
            }
        }
        
        int count=0;
        while(!queue.isEmpty()){
            int course = queue.poll();
            count++;
            
            int size=edges[course].size();
            for(int i=0;i<size;i++){
                int temp = (int)edges[course].get(i);
                
                degrees[temp]--;
                
                if(degrees[temp]==0){
                    queue.add(temp);
                }
            }
        }
        
        return (count==numCourses)?true:false;
    }
}
