class Solution {
    public int numIslands(char[][] grid) {
        if(grid==null || grid.length==0 || grid[0].length==0){
            return 0;
        }
        
        int count=0;
        for(int i=0;i<grid.length;i++){
            for(int j=0;j<grid[i].length;j++){
                if(grid[i][j]=='1'){
                    findisland(grid,i,j);
                    count++;
                }
            }
        }
        
        return count;
    }
    
    private boolean isValid(char[][] grid, int row,int col){
        if(row<0 || row>=grid.length || col<0 || col>=grid[0].length){
            return false;
        }
        
        if(grid[row][col]=='2'){
            return false;
        }
        
        if(grid[row][col]=='0'){
            return false;
        }
        return true;
    }
    
    private void findisland(char[][] grid, int row, int col){
        int[] deltx = {0,0,-1,1};
        int[] delty = {-1,1,0,0};
        
        Queue<Integer> queuex = new LinkedList<Integer>();
        Queue<Integer> queuey = new LinkedList<Integer>();
        
        queuex.add(row);
        queuey.add(col);
        grid[row][col] = '2';
        
        while(!queuex.isEmpty() && !queuey.isEmpty()){
            int x = queuex.poll();
            int y = queuey.poll();
            
            for(int i=0;i<deltx.length;i++){
                int tempx = x+deltx[i];
                int tempy = y+delty[i];
                
                if(isValid(grid,tempx,tempy)){
                    grid[tempx][tempy]='2';
                    queuex.add(tempx);
                    queuey.add(tempy);
                }
                
            }
        }
    }
}
