class LRUCache {
    private Map<Integer,Integer> map;
    private Set<Integer> set;
    private ListNode head;
    private int size;

    public LRUCache(int capacity) {
        map = new HashMap<>();
        set = new HashSet<>();
        head = new ListNode(0);
        size = capacity;
    }
    
    public int get(int key) {
        if(size==0)
            return -1;
        if(!set.contains(key))
            return -1;
        
        delet(key);
        ListNode temp = head.next;
        head.next = new ListNode(key);
        head.next.next=temp;
        return map.get(key);
    }
    
    public void put(int key, int value) {
        if(set.size()<size && !set.contains(key)){
            ListNode temp = head.next;
            head.next = new ListNode(key);
            head.next.next = temp;
            set.add(key);
            map.put(key, value);
        }else if(set.contains(key)){
            delet(key);
            ListNode temp = head.next;
            head.next = new ListNode(key);
            head.next.next = temp;
            map.put(key,value);
        }else{
            ListNode temp = head;
            for(int i=1;i<size;i++){
                temp=temp.next;
            }
            set.remove(temp.next.val);
            temp.next=null;
            temp=head.next;
            head.next = new ListNode(key);
            head.next.next=temp;
            map.put(key,value);
            set.add(key);
        }
    }
    
    private void delet(int key){
        ListNode temp = head;
        while(temp.next!=null && temp.next.val!=key){
            temp=temp.next;
        }
        temp.next = temp.next.next;
    }
}

/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache obj = new LRUCache(capacity);
 * int param_1 = obj.get(key);
 * obj.put(key,value);
 */
