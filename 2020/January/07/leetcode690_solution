/*
// Employee info
class Employee {
    // It's the unique id of each node;
    // unique id of this employee
    public int id;
    // the importance value of this employee
    public int importance;
    // the id of direct subordinates
    public List<Integer> subordinates;
};
*/
class Solution {
    public int getImportance(List<Employee> employees, int id) {
        int res=0;
        Queue<Integer> queue = new LinkedList<>();
        queue.add(id);
        Set<Integer> set = new HashSet<>();
        Map<Integer,Employee> map = new HashMap<>();
        for(Employee ee: employees)
            map.put(ee.id,ee);
        set.add(id);
        while(!queue.isEmpty()){
            int temp = queue.poll();
            res+=map.get(temp).importance;
            int size=map.get(temp).subordinates.size();
            for(int i=0;i<size;i++){
                if(!set.contains(map.get(temp).subordinates.get(i))){
                    queue.add(map.get(temp).subordinates.get(i));
                    set.add(map.get(temp).subordinates.get(i));   
                }
            }
        }
        
        return res;
    }
}
