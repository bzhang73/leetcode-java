class Solution {
    int[][] G;
    int[][][] dp;
    public int catMouseGame(int[][] graph) {
        G=graph;
        dp=new int[graph.length][graph.length][3];
        int res=helper(new int[]{1,2,0});
        if(res==1)
            return 2;
        else if(res==2)
            return 0;
        return 1;
    }
    
    private int helper(int[] status){
        int mouse = status[0];
        int cat=status[1];
        int flag=status[2];
        
        if(dp[mouse][cat][flag]>0)
            return dp[mouse][cat][flag];
        dp[mouse][cat][flag]=2;
        if(mouse==0)
            return 3;
        if(mouse==cat)
            return 1;
        if(flag==0){
            int max=0;
            for(int next: G[mouse]){
                if(next==0){
                    dp[mouse][cat][flag]=3;
                    return 3;
                }
            }
            for(int next: G[mouse]){
                int cur = helper(new int[]{next,cat,1});
                max=Math.max(max,cur);
                if(max==3){
                    dp[mouse][cat][flag]=max;
                    return max;
                }
            }
            dp[mouse][cat][flag]=max;
            return max;
        }else{
            int min=4;
            for(int next:G[cat]){
                if(next==mouse){
                    dp[mouse][cat][flag]=1;
                    return 1;
                }
            }
            for(int next:G[cat]){
                if(next!=0){
                    int cur=helper(new int[]{mouse,next,0});
                    min=Math.min(min,cur);
                }
                
                if(min==1){
                    dp[mouse][cat][flag]=1;
                    return 1;
                }
            }
            dp[mouse][cat][flag]=min;
            return min;
        }
    }
}
