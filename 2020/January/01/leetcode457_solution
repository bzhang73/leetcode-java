class Solution {
    public boolean circularArrayLoop(int[] nums) {
        if(nums==null || nums.length==0)
            return false;
        
        boolean[] visited=new boolean[nums.length];
        boolean[] reVisited=new boolean[nums.length];
        
        for(int i=0;i<nums.length;i++){
            if(!visited[i]){
                if(nums[i]>0){
                    if(dfs(nums,visited,reVisited,1,i,-1)){
                        return true;
                    }
                }else{
                    if(dfs(nums,visited,reVisited,-1,i,-1)){
                        return true;
                    }
                }
            }
        }
        return false;
    }
    
    private boolean dfs(int[] nums, boolean[] visited, boolean[] reVisited, int flag, int index, int preIndex){
        if(reVisited[index] && index!=preIndex)
            return true;
        
        if(visited[index])
            return false;
        
        if((nums[index]<0 && flag>0) || (nums[index]>0 && flag<0))
            return false;
        
        visited[index]=true;
        reVisited[index]=true;
        
        if(dfs(nums,visited,reVisited,flag,getNext(index,nums.length,nums[index]),index))
            return true;
        
        reVisited[index]=false;
        
        return false;
    }
    
    private int getNext(int index, int length, int value){
        int sum=index+value;
        if(sum>=0 && index+value<length)
            return index+value;
        
        if(sum%length>0)
            return sum%length;
        
        if(sum%length<0)
            return length+sum%length;
        
        
        return 0;
    }
}
