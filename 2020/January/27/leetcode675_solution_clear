class Solution {
    private int direction[][]=new int[][]{{-1,0},{0,-1},{0,1},{1,0}};
    private int m,n;
    public int cutOffTree(List<List<Integer>> forest) {
        PriorityQueue<int[] > queue = new PriorityQueue<int[]>((a,b)->(a[2]-b[2]));
        m=forest.size();
        n=forest.get(0).size();
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(forest.get(i).get(j)!=0)
                    queue.offer(new int[]{i,j,forest.get(i).get(j)});
            }
        }
        
        int res=0;
        int x=0;
        int y=0;
        while(!queue.isEmpty()){
            int[] temp=queue.poll();
            int distance=bfs(forest, x, y, temp[2]);
            if(distance==-1)
                return distance;
            res+=distance;
            x=temp[0];
            y=temp[1];
        }
        
        return res;
    }
    
    private int bfs(List<List<Integer>> forest, int x, int y, int target){
        if(forest.get(x).get(y)==target)
            return 0;
        Queue<int[]> queue = new LinkedList<>();
        queue.offer(new int[]{x,y});
        boolean[][] visited=new boolean[m][n];
        visited[x][y]=true;
        int res=1;
        
        while(!queue.isEmpty()){
            int size=queue.size();
            for(int i=0;i<size;i++){
                int[] temp =queue.poll();
                
                for(int j=0;j<4;j++){
                    int tempx=temp[0]+direction[j][0];
                    int tempy=temp[1]+direction[j][1];
                    
                    if(tempx<0 || tempx>=m || tempy<0 || tempy>=n || visited[tempx][tempy] || forest.get(tempx).get(tempy)==0)
                        continue;
                    
                    if(forest.get(tempx).get(tempy)==target)
                        return res;
                    queue.offer(new int[]{tempx, tempy});
                    visited[tempx][tempy]=true;
                }
            }
            res++;
        }
        return -1;
    }
    
}
