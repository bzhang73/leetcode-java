class Solution {
    public List<List<Integer>> criticalConnections(int n, List<List<Integer>> connections) {
        List<List<Integer>> res = new ArrayList<>();
        List<List<Integer>> graph = new ArrayList<>();
        for(int i=0;i<n;i++)
            graph.add(new ArrayList<Integer>());
        for(int i=0;i<connections.size();i++){
            graph.get(connections.get(i).get(0)).add(connections.get(i).get(1));
            graph.get(connections.get(i).get(1)).add(connections.get(i).get(0));
        }
        
        boolean[] visited=new boolean[n];
        int[] order= new int[n];
        int[] unique= new int[1];
        
        dfs(graph, -1, 0, visited, order, unique, res);
        return res;
    }
    
    private void dfs(List<List<Integer>> graph, int prev, int src, boolean[] visited, int[] order, int[] unique, List<List<Integer>> res){
        visited[src]=true;
        order[src]=unique[0]++;
        int original = order[src];
        
        for(int neighbor: graph.get(src)){
            if(neighbor==prev)
                continue;
            if(!visited[neighbor])
                dfs(graph, src, neighbor, visited, order, unique, res);
            order[src]=Math.min(order[src], order[neighbor]);
            if(original<order[neighbor]){
                List<Integer> list = new ArrayList<>();
                list.add(src);
                list.add(neighbor);
                res.add(list);
            }
        }
    }
}
