class Solution {
    public void wallsAndGates(int[][] rooms) {
        if(rooms==null || rooms.length==0 || rooms[0]==null || rooms[0].length==0)
            return;
        int m = rooms.length;
        int n = rooms[0].length;
        Queue<int[]> queue = new LinkedList<>();
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(rooms[i][j]==0){
                    queue.add(new int[]{i,j});
                }
            }
        }
        int res=0;
        boolean[][] visited=new boolean[m][n];
        int[][] direction=new int[][]{{-1,0},{0,-1},{0,1},{1,0}};
        while(!queue.isEmpty()){
            int size=queue.size();
            for(int k=0;k<size;k++){
                int[] temp =queue.poll();
                rooms[temp[0]][temp[1]]=res;
                for(int i=0;i<4;i++){
                    int tempx=temp[0]+direction[i][0];
                    int tempy=temp[1]+direction[i][1];
                    
                    if(tempx>=0 && tempx<m && tempy>=0 && tempy<n){
                        if(rooms[tempx][tempy]==2147483647  && !visited[tempx][tempy]){
                            visited[tempx][tempy]=true;
                            queue.offer(new int[]{tempx,tempy});
                        }
                    }
                }
            }
            res++;
        }
    }
}
