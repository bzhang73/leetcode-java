class Solution {
    public boolean canReach(int[] arr, int start) {
        int res=0;
        int n=arr.length;
        boolean[] isValid = new boolean[n];
        Queue<Integer> queue = new LinkedList<>();
        queue.offer(start);
        isValid[start]=true;
        if(arr[start]==0)
            return true;
        while(!queue.isEmpty()){
            int size= queue.size();
            for(int i=0;i<size;i++){
                int temp=queue.poll();
                if(temp+arr[temp]>=0 && temp+arr[temp]<n){
                    if(!isValid[temp+arr[temp]]){
                        queue.offer(temp+arr[temp]);
                        isValid[temp+arr[temp]]=true;
                        if(arr[temp+arr[temp]]==0)
                            return true;
                    }
                }
                if(temp-arr[temp]>=0 && temp-arr[temp]<n){
                    if(!isValid[temp-arr[temp]]){
                        queue.offer(temp-arr[temp]);
                        isValid[temp-arr[temp]]=true;
                        if(arr[temp-arr[temp]]==0)
                            return true;
                    }
                }
            }
        }
        return false;
    }
}
