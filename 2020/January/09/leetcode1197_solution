class Solution {
    public int minKnightMoves(int x, int y) {
        if(x==0 && y==0)
            return 0;
        int res=1;
        Map<Integer,Set<Integer>> map = new HashMap<>();
        Queue<int[] > queue = new LinkedList<>();
        queue.add(new int[]{0,0});
        map.putIfAbsent(0,new HashSet<>());
        map.get(0).add(0);
        
        int[] directionX=new int[]{-2,-2,-1,-1,1,1,2,2};
        int[] directionY=new int[]{-1,1,-2,2,-2,2,-1,1};
        
        while(!queue.isEmpty()){
            int size=queue.size();
            for(int a=0;a<size;a++){
                int[] temp= queue.poll();
            
                for(int i=0;i<directionX.length;i++){
                    int tempx=temp[0]+directionX[i];
                    int tempy=temp[1]+directionY[i];
                
                    if(isValid(map, tempx, tempy)){
                        if(tempx==x && tempy==y)
                            return res;
                        queue.add(new int[]{tempx,tempy});
                        map.putIfAbsent(tempx,new HashSet());
                        map.get(tempx).add(tempy);
                    }
                }
            }
            
            res++;
        }
        return -1;
    }
    
    private boolean isValid(Map<Integer,Set<Integer>> map, int x, int y){
        if(x<-400 || x>400)
            return false;
        if(y<-400 || y>400)
            return false;
        if(map.containsKey(x) && map.get(x).contains(y))
            return false;
        return true;
    }
}
