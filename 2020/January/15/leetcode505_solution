class Solution {
    public int shortestDistance(int[][] maze, int[] start, int[] destination) {
        Queue<int[]> queue =new LinkedList<>();
        queue.add(new int[]{start[0],start[1],0});
        int m=maze.length;
        int n=maze[0].length;
        boolean[][] visited=new boolean[m][n];
        visited[start[0]][start[1]]=true;
        
        int[] direction= new int[]{0,1,2,3};
        // boolean vaild=false;
        int res=-1;
        int[][] count=new int[m][n];
        for(int i=0;i<m;i++)
            Arrays.fill(count[i],-1);
        count[start[0]][start[1]]=0;
        while(!queue.isEmpty()){
            int size=queue.size();
            for(int k=0;k<size;k++){
                int[] temp=queue.poll();
                for(int i=0;i<direction.length;i++){
                    int[] a=findDirection(maze,temp[0], temp[1], direction[i]);
                    if(a[0]==destination[0] && a[1]==destination[1]){
                        res=(res==-1)?temp[2]+a[2]:Math.min(res,temp[2]+a[2]);
                        // vaild=true;
                    }
                    if(count[a[0]][a[1]]==-1 || (temp[2]+a[2])<count[a[0]][a[1]]){
                        queue.offer(new int[]{a[0],a[1],temp[2]+a[2]});
                        visited[a[0]][a[1]]=true;
                        count[a[0]][a[1]]=temp[2]+a[2];
                    }
                }
            }
            // if(vaild)
            //     return res; 
        }
        return res;
    }
    
    private int[] findDirection(int[][] maze, int x, int y, int direction){
        int[] res = new int[3];
        int count=0;
        if(direction==0){
            while(x>0){
                if(maze[x-1][y]==1)
                    break;
                x--;
                count++;
            }
        }else if(direction==1){
            while(x<maze.length-1){
                if(maze[x+1][y]==1)
                    break;
                x++;
                count++;
            }
        }else if(direction==2){
            while(y>0){
                if(maze[x][y-1]==1)
                    break;
                y--;
                count++;
            }
        }else if(direction==3){
            while(y<maze[0].length-1){
                if(maze[x][y+1]==1)
                    break;
                y++;
                count++;
            }
        }
        res[0]=x;
        res[1]=y;
        res[2]=count;
        // System.out.println(direction+" "+count);
        return res;
    }
}
