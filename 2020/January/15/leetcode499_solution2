class Solution {
    class ballPos{
        int x;
        int y;
        int steps;
        String res;
        
        public ballPos(int x, int y, int steps, String res){
            this.x=x;
            this.y=y;
            this.steps=steps;
            this.res=res;
        }
    }
    public String findShortestWay(int[][] maze, int[] ball, int[] hole) {
        Queue<ballPos> queue =new LinkedList<>();
        queue.add(new ballPos(ball[0],ball[1],0,""));
        int m=maze.length;
        int n=maze[0].length;
        
        int[] direction= new int[]{0,1,2,3};
        
        int[][] count=new int[m][n];
        String[][] res=new String[m][n];
        
        for(int i=0;i<m;i++)
            Arrays.fill(count[i],-1);
        
        count[ball[0]][ball[1]]=0;
        while(!queue.isEmpty()){
            int size=queue.size();
            for(int k=0;k<size;k++){
                ballPos temp=queue.poll();
                // System.out.println(temp.x+" "+temp.y);
                for(int i=0;i<direction.length;i++){
                    ballPos a=findDirection(maze,temp, direction[i], hole);
                    if(a.x==temp.x && a.y==temp.y)
                        continue;
                    
                    // System.out.println(a.x+" "+a.y+" "+a.res);
                    
                    if(count[a.x][a.y]==-1 || a.steps<=count[a.x][a.y]){
                        
                        queue.offer(new ballPos(a.x,a.y,a.steps,a.res));
                        count[a.x][a.y]=a.steps;
                        if(res[a.x][a.y]==null)
                            res[a.x][a.y]=a.res;
                        else
                            if(res[a.x][a.y].compareTo(a.res)>0)
                                res[a.x][a.y]=a.res;
                    }
                }
            }
        }
        // System.out.println(res[hole[0]][hole[1]]+ " "+count[hole[0]][hole[1]]);
        return (res[hole[0]][hole[1]]==null || res[hole[0]][hole[1]]=="")?"impossible":res[hole[0]][hole[1]];
    }
    
     private ballPos findDirection(int[][] maze, ballPos a, int direction, int[] hole){
         ballPos ball = new ballPos(a.x, a.y, a.steps, a.res);
        if(direction==0){
            while(ball.x>0){
                if(maze[ball.x-1][ball.y]==1)
                    break;
                ball.x--;
                ball.steps++;
                if(ball.x==hole[0] && ball.y==hole[1])
                    return new ballPos(hole[0],hole[1],ball.steps,ball.res+"u");
            }
        }else if(direction==1){
            while(ball.x<maze.length-1){
                if(maze[ball.x+1][ball.y]==1)
                    break;
                ball.x++;
                ball.steps++;
                if(ball.x==hole[0] && ball.y==hole[1])
                    return new ballPos(hole[0],hole[1],ball.steps,ball.res+"d");
            }
        }else if(direction==2){
            while(ball.y>0){
                if(maze[ball.x][ball.y-1]==1)
                    break;
                ball.y--;
                ball.steps++;
                if(ball.x==hole[0] && ball.y==hole[1])
                    return new ballPos(hole[0],hole[1],ball.steps,ball.res+"l");
            }
        }else if(direction==3){
            while(ball.y<maze[0].length-1){
                if(maze[ball.x][ball.y+1]==1)
                    break;
                ball.y++;
                ball.steps++;
                if(ball.x==hole[0] && ball.y==hole[1])
                    return new ballPos(hole[0],hole[1],ball.steps,ball.res+"r");
            }
        }
         
        switch(direction){
            case 0:
                return new ballPos(ball.x, ball.y, ball.steps, ball.res+"u");
                // break;
            case 1:
                return new ballPos(ball.x, ball.y, ball.steps, ball.res+"d");
                // break;
            case 2:
                return new ballPos(ball.x, ball.y, ball.steps, ball.res+"l");
                // break;
            case 3:
                return new ballPos(ball.x, ball.y, ball.steps, ball.res+"r");
                // break;
        }
         // System.out.println(ball.x+" "+ball.y+" "+ball.res);
        return ball;
    }
}
