class Solution {
    public int openLock(String[] deadends, String target) {
        int a0=(int)target.charAt(0)-'0';
        int a1=(int)target.charAt(1)-'0';
        int a2=(int)target.charAt(2)-'0';
        int a3=(int)target.charAt(3)-'0';
        int targetNumber=a0*1000+a1*100+a2*10+a3;
        if(targetNumber==0)
            return 0;
        int[] lock=new int[4];
        
        Set<Integer> dead = new HashSet<>();
        for(String str: deadends)
            dead.add(changeToInt(new int[]{(int)str.charAt(0)-'0',(int)str.charAt(1)-'0',(int)str.charAt(2)-'0',(int)str.charAt(3)-'0'}));
        
        if(dead.contains(0))
            return -1;
        
        if(dead.contains(targetNumber))
            return -1;
        
        Queue<int[]> queue = new LinkedList<>();
        Set<Integer> visited = new HashSet<>();
        queue.add(lock);
        visited.add(changeToInt(lock));
        int res=1;
        
        while(!queue.isEmpty()){
            int size=queue.size();
            for(int i=0;i<size;i++){
                int[] temp = queue.poll();
                // System.out.println(changeToInt(temp));
                for(int j=0;j<4;j++){
                    int[] b=new int[]{temp[0],temp[1],temp[2],temp[3]};
                    b[j]=(b[j]+1)%10;
                    int number = changeToInt(b);
                    if(number==targetNumber)
                        return res;
                    if(!visited.contains(number) && !dead.contains(number)){
                        queue.offer(new int[]{b[0],b[1],b[2],b[3]});
                        visited.add(number);
                    }
                       
                    b = new int[]{temp[0],temp[1],temp[2],temp[3]};
                    b[j]=(b[j]+9)%10;
                    number = changeToInt(b);
                    if(number==targetNumber)
                        return res;
                    if(!visited.contains(number) && !dead.contains(number)){
                        queue.offer(new int[]{b[0],b[1],b[2],b[3]});
                        visited.add(number);
                    }
                }
            }
            res++;
        }
        return -1;
    }
    
    private int changeToInt(int[] a){
        return a[0]*1000+a[1]*100+a[2]*10+a[3];
    }
}
