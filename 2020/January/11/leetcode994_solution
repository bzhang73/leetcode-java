class Solution {
    public int orangesRotting(int[][] grid) {
        int m=grid.length;
        int n=grid[0].length;
        
        Queue<int[]> queue = new LinkedList<>();
        int count=0;
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(grid[i][j]==1){
                    count++;
                }else if(grid[i][j]==2){
                    queue.offer(new int[]{i,j});
                }
            }
        }
        if(count==0)
            return 0;
        
        int res=0;
        int[][] direction=new int[][]{{-1,0},{0,-1},{0,1},{1,0}};
        while(!queue.isEmpty()){
            int size=queue.size();
            for(int i=0;i<size;i++){
                int[] temp = queue.poll();
                for(int j=0;j<4;j++){
                    int tempx=temp[0]+direction[j][0];
                    int tempy=temp[1]+direction[j][1];
                    
                    if(tempx>=0 && tempx<m && tempy>=0 && tempy<n){
                        if(grid[tempx][tempy]==1){
                            queue.offer(new int[]{tempx,tempy});
                            grid[tempx][tempy]=2;
                            count--;
                        }
                    }
                }
            }
            res++;
        }
        if(count>0)
            return -1;
        return res-1;
    }
}
