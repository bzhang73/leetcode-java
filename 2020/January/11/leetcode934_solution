class Solution {
    private int m,n;
    private int[][] direction= new int[][]{{-1,0},{0,-1},{0,1},{1,0}};
    public int shortestBridge(int[][] A) {
        m=A.length;
        n=A[0].length;
        int time=0;
        
        Queue<int[]> queue = new LinkedList<>();
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(A[i][j]==1){
                    if(time<1){
                        colorIsland(A,i,j);
                        time++;
                    }
                }
                if(A[i][j]==2){
                    time++;
                    queue.offer(new int[]{i,j});
                }
            }
        }
        // for(int i=0;i<m;i++){
        //     for(int j=0;j<n;j++)
        //         System.out.print(A[i][j]+" ");
        //     System.out.println();
        // }
        
        int res=0;
        while(!queue.isEmpty()){
            int size=queue.size();
            for(int i=0;i<size;i++){
                int[] temp =queue.poll();
                for(int j=0;j<4;j++){
                    int tempx=temp[0]+direction[j][0];
                    int tempy=temp[1]+direction[j][1];
                    
                    if(tempx>=0 && tempx<m && tempy>=0 && tempy<n){
                        if(A[tempx][tempy]==1)
                            return res;
                        if(A[tempx][tempy]==0){
                            A[tempx][tempy]=2;
                            queue.offer(new int[]{tempx,tempy});
                        }
                    }
                }
            }
            res++;
        }
        
        return -1;
    }
    
    private void colorIsland(int[][] A, int x, int y){
        Queue<int[]> queue = new LinkedList<>();
        queue.offer(new int[]{x,y});
        A[x][y]=2;
        while(!queue.isEmpty()){
            int size=queue.size();
            for(int i=0;i<size;i++){
                int[] temp = queue.poll();
                // System.out.println(temp[0]+" "+temp[1]);
                for(int j=0;j<4;j++){
                    int tempx=temp[0]+direction[j][0];
                    int tempy=temp[1]+direction[j][1];
                    
                    if(tempx>=0 && tempx<m && tempy>=0 && tempy<n){
                        if(A[tempx][tempy]==1){
                            A[tempx][tempy]=2;
                            queue.offer(new int[]{tempx,tempy});
                        }
                    }
                }
            }
        }
    }
}
