class Solution {
    public int shortestPathBinaryMatrix(int[][] grid) {
        int m=grid.length;
        int n=grid[0].length;
        
        Queue<int[]> queue = new LinkedList<>();
        boolean[][] visited = new boolean[m][n];
        if(grid[0][0]==1 || grid[m-1][n-1]==1)
            return -1;
        if(m==1 && n==1)
            return 1;
        queue.offer(new int[]{0,0});
        visited[0][0]=true;
        
        int res=1;
        int[][] direction = new int[][]{{-1,-1},{-1,0},{-1,1},{0,-1},{0,1},{1,-1},{1,0},{1,1}};
        while(!queue.isEmpty()){
            int size = queue.size();
            res++;
            for(int i=0;i<size;i++){
                int[] temp=queue.poll();
                for(int j=0;j<8;j++){
                    int tempx=temp[0]+direction[j][0];
                    int tempy=temp[1]+direction[j][1];
                    
                    if(tempx>=0 && tempx<m && tempy>=0 && tempy<n){
                        if(tempx==m-1 && tempy==n-1)
                            return res;
                        if(!visited[tempx][tempy] && grid[tempx][tempy]==0){
                            queue.offer(new int[]{tempx,tempy});
                            visited[tempx][tempy]=true;
                        }
                    }
                }
            }
        }
        return -1;
    }
}
