class Solution {
    private int count;
    public int[] findOrder(int numCourses, int[][] prerequisites) {
        List[] request=new ArrayList[numCourses];
        int[] level = new int[numCourses];
        for(int i=0;i<numCourses;i++)
            request[i]=new ArrayList<Integer>();
        
        for(int i=0;i<prerequisites.length;i++){
            level[prerequisites[i][0]]++;
            request[prerequisites[i][1]].add(prerequisites[i][0]);
        }
        
        int[] res = new int[numCourses];
        Set<Integer> set = new HashSet<>();
        count=0;
        for(int i=0;i<numCourses;i++){
            if(level[i]==0 && !set.contains(i)){
                set.add(i);
                res[count++]=i;
                dfs(request, level, set, i, res);
            }
        }
        if(count!=numCourses)
            return new int[0];
        return res;
    }
    
    private void dfs(List[] request, int[] level, Set<Integer> set, int course, int[] res){
        for(int i=0;i<request[course].size();i++){
            int next=(int)request[course].get(i);
            level[next]--;
            if(level[next]==0){
                set.add(next);
                res[count++]=next;
                dfs(request, level, set, next, res);
            }
        }
    }
}
