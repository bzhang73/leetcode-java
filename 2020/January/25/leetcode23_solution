/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
        if (lists==null || lists.length==0)
            return null;
        return mergeK(lists,0,lists.length-1);
    }
    
    private ListNode mergeK(ListNode[] lists, int start, int end){
        if(start==end)
            return lists[start];
        int mid=(end-start)/2+start;
        ListNode left=mergeK(lists,start,mid);
        ListNode right=mergeK(lists,mid+1,end);
        return mergerTwo(left,right);
    }
    
    private ListNode mergerTwo(ListNode l1, ListNode l2){
        ListNode dummy=new ListNode(0);
        ListNode head=dummy;
        
        while(l1!=null && l2!=null){
            if(l1.val<=l2.val){
                head.next=l1;
                l1=l1.next;
            }else{
                head.next=l2;
                l2=l2.next;
            }
            head=head.next;
        }
        if(l1==null)
            head.next=l2;
        if(l2==null)
            head.next=l1;
        return dummy.next;
    }
}
