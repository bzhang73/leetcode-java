class Solution {
    public List<Integer> findMinHeightTrees(int n, int[][] edges) {
        List<Integer> res = new ArrayList<>();
        if(edges==null || edges.length==0 || edges[0]==null || edges[0].length==0){
            res.add(0);
            return res;
        }
        
        List<Integer>[] graph = new ArrayList[n];
        for(int i=0;i<n;i++)
            graph[i]=new ArrayList<>();
        int[] degree=new int[n];
        
        for(int i=0;i<edges.length;i++){
            graph[edges[i][0]].add(edges[i][1]);
            graph[edges[i][1]].add(edges[i][0]);
            degree[edges[i][0]]++;
            degree[edges[i][1]]++;
        }
        
        Queue<Integer> queue = new LinkedList<>();
        for(int i=0;i<n;i++)
            if(degree[i]==1)
                queue.add(i);
        
        while(n>2){
            int size=queue.size();
            for(int i=0;i<size;i++){
                int temp = queue.poll();
                n--;
                for(int next: graph[temp]){
                    if(degree[next]==1)
                        continue;
                    degree[next]--;
                    if(degree[next]==1)
                        queue.offer(next);
                }
            }
        }
        
        while(!queue.isEmpty())
            res.add(queue.poll());
        return res;
    }
}
