class Solution {
    public int snakesAndLadders(int[][] board) {
        int m=board.length;
        int n=board[0].length;
        
        Queue<Integer> queue = new LinkedList<>();
        queue.offer(1);
        boolean[] visited=new boolean[m*n+1];
        int step=0;
        
        while(!queue.isEmpty()){
            int size=queue.size();
            for(int i=0;i<size;i++){
                int temp=queue.poll();
                if(visited[temp])
                    continue;
                visited[temp]=true;
                
                if(temp==m*n)
                    return step;
                for(int j=1;j<=6 && temp+j<=m*n;j++){
                    int next=temp+j;
                    int value=getBoardValue(board, next);
                    if(value>0)
                        next=value;
                    if(!visited[next])
                        queue.offer(next);
                }
            }
            step++;
        }
        return -1;
    }
    
    private int getBoardValue(int[][] board, int num){
        int n=board.length;
        int r=(num-1)/n;
        int x = n-1-r;
        int y = r%2==0? num-1-r*n:n+r*n-num;
        return board[x][y];
    }
}
