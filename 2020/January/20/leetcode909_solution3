class Solution {
    public int snakesAndLadders(int[][] board) {
        int N = board.length, idx = 0, target = N * N, step = 1;
        int[] arr = new int[N * N];
        for (int i = N - 1, j = 0; i >= 0; i--, j++) {
            for (int k = 0; k < N; k++) {
                int val = j % 2 == 0 ? board[i][k] : board[i][N - k - 1];
                arr[idx++] = val > 0 ? val - 1 : -1;
            }
        }
        Queue<Integer> q = new ArrayDeque<>();
        boolean[] seen = new boolean[target];
        q.offer(0);
        seen[0] = true;
        while (!q.isEmpty()){
            for (int i = 0, len = q.size(); i < len; i++) {
                int a = q.poll();
                for (int j = 1, k = a + 1; j <= 6 && k < target; j++, k++) {
                    int next = arr[k] < 0 ? k : arr[k];
                    if (arr[k] == target - 1 || k == target - 1) return step;
                    if (seen[next]) continue;
                    q.offer(next);
                    seen[arr[k] < 0 ? k : arr[k]] = true;
                }
            }
            step++;
        }
        return -1;
    }
}
