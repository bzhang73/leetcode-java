class Solution {
    private int[][] direction=new int[][]{{-1,0},{1,0},{0,-1},{0,1}};
    private int m,n;
    public int minPushBox(char[][] grid) {
        Queue<int[]> box = new LinkedList<>();
        m=grid.length;
        n= grid[0].length;
        boolean[][][][] visited=new boolean[m][n][m][n];
        int[] bpos=new int[2];
        int[] ppos=new int[2];
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(grid[i][j]=='S'){
                    ppos[0]=i;
                    ppos[1]=j;
                    grid[i][j]='.';
                }else if(grid[i][j]=='B'){
                    bpos[0]=i;
                    bpos[1]=j;
                    grid[i][j]='.';
                    visited[i][j][i][j]=true;
                }
            }
        }
        box.add(new int[]{bpos[0],bpos[1],ppos[0],ppos[1]});
        // for(int i=0;i<4;i++)
        //     System.out.println(direction[i][0]+ " "+direction[i][1]+" "+i);
        // System.out.println(grid[6][6]);
        
        int res=1;
        while(!box.isEmpty()){
            int size=box.size();
            for(int i=0;i<size;i++){
                int[] temp = box.poll();
                if(grid[temp[0]][temp[1]]=='T')
                    return res;
                // System.out.println(temp[0]+" "+temp[1]+" "+temp[2]+" "+temp[3]+" "+res);
                // System.out.println((temp[0]+direction[0][0])+" "+(temp[1]+direction[0][1]) + " "+ temp[0]+ " "+ temp[1]);
                // System.out.println((temp[0]+direction[1][0])+" "+(temp[1]+direction[1][1]) + " "+ temp[1]);
                if(temp[0]==0 || temp[0]==m-1){
                    
                }
                // else if(((grid[temp[0]+direction[0][0]][temp[1]+direction[0][1]]=='.' || grid[temp[0]+direction[0][0]][temp[1]+direction[0][1]]=='T') && (grid[temp[0]+direction[1][0]][temp[1]+direction[1][1]]=='.')  || grid[temp[0]+direction[1][0]][temp[1]+direction[1][1]]=='T')){
                else if(grid[temp[0]+direction[0][0]][temp[1]+direction[0][1]]!='#' && grid[temp[0]+direction[1][0]][temp[1]+direction[1][1]]!='#' ){
                    if(!visited[temp[0]+direction[0][0]][temp[1]+direction[0][1]][temp[0]][temp[1]]){
                        if(findPosition(grid,temp[0],temp[1], temp[0]+direction[1][0], temp[1]+direction[1][1], temp[2], temp[3])){
                            if(grid[temp[0]+direction[0][0]][temp[1]+direction[0][1]]=='T')
                                return res;
                            box.add(new int[]{temp[0]+direction[0][0], temp[1]+direction[0][1], temp[0], temp[1]});
                            visited[temp[0]+direction[0][0]][temp[1]+direction[0][1]][temp[0]][temp[1]]=true;
                        }
                    }
                    
                    
                    if(!visited[temp[0]+direction[1][0]][temp[1]+direction[1][1]][temp[0]][temp[1]]){
                        if(findPosition(grid,temp[0],temp[1], temp[0]+direction[0][0], temp[1]+direction[0][1], temp[2], temp[3])){
                            if(grid[temp[0]+direction[1][0]][temp[1]+direction[1][1]]=='T')
                                return res;
                            box.add(new int[]{temp[0]+direction[1][0], temp[1]+direction[1][1], temp[0], temp[1]});
                            visited[temp[0]+direction[1][0]][temp[1]+direction[1][1]][temp[0]][temp[1]]=true;
                        }
                    }   
                }
                
                if(temp[1]==0 || temp[1]==n-1){
                    
                }
                // else if((grid[temp[0]+direction[2][0]][temp[1]+direction[2][1]]=='.'|| grid[temp[0]+direction[2][0]][temp[1]+direction[2][1]]=='T') && (grid[temp[0]+direction[3][0]][temp[1]+direction[3][1]]=='.'  || grid[temp[0]+direction[3][0]][temp[1]+direction[3][1]]=='T')){
                else if(grid[temp[0]+direction[2][0]][temp[1]+direction[2][1]]!='#' && grid[temp[0]+direction[3][0]][temp[1]+direction[3][1]]!='#' ){
                    // System.out.println(temp[0]+" "+temp[1]);
                    if(!visited[temp[0]+direction[2][0]][temp[1]+direction[2][1]][temp[0]][temp[1]]){
                        if(findPosition(grid,temp[0],temp[1], temp[0]+direction[3][0], temp[1]+direction[3][1], temp[2], temp[3])){
                            if(grid[temp[0]+direction[2][0]][temp[1]+direction[2][1]]=='T')
                                return res;
                            box.add(new int[]{temp[0]+direction[2][0], temp[1]+direction[2][1], temp[0], temp[1]});
                            visited[temp[0]+direction[2][0]][temp[1]+direction[2][1]][temp[0]][temp[1]]=true;
                        }
                    }
                    
                    
                    if(!visited[temp[0]+direction[3][0]][temp[1]+direction[3][1]][temp[0]][temp[1]]){
                        if(findPosition(grid,temp[0],temp[1], temp[0]+direction[2][0], temp[1]+direction[2][1], temp[2], temp[3])){
                            if(grid[temp[0]+direction[3][0]][temp[1]+direction[3][1]]=='T')
                                return res;
                            box.add(new int[]{temp[0]+direction[3][0], temp[1]+direction[3][1], temp[0], temp[1]});
                            visited[temp[0]+direction[3][0]][temp[1]+direction[3][1]][temp[0]][temp[1]]=true;
                        }
                    }   
                }
            }
            res++;
        }
        return -1;
    }
    
    private boolean findPosition(char[][] grid,int boxx, int boxy, int targetx, int targety, int x, int y){
        Queue<int[]> queue = new LinkedList<>();
        queue.add(new int[]{x,y});
        boolean[][] visited= new boolean[m][n];
        visited[x][y]=true;
        while(!queue.isEmpty()){
            int size=queue.size();
            for(int i=0;i<size;i++){
                int[] temp = queue.poll();
                if(temp[0]==targetx && temp[1]==targety)
                    return true;
                for(int[] a: direction){
                    int tempx=temp[0]+a[0];
                    int tempy = temp[1]+a[1];
                    if(isValid(grid, visited, boxx, boxy, tempx, tempy)){
                        queue.add(new int[]{tempx,tempy});
                        visited[tempx][tempy]=true;
                    }
                }
            }
        }
        return false;
    }
    
    private boolean isValid(char[][] grid, boolean[][] visited, int boxx, int boxy, int x, int y){
        if(x<0 || x>=m)
            return false;
        if(y<0 || y>=n)
            return false;
        if(x==boxx && y==boxy)
            return false;
        if(visited[x][y])
            return false;
        if(grid[x][y]=='#')
            return false;
        return true;
    }
}
