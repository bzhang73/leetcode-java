class Solution {
    private int m,n;
    private int[][] direction= new int[][]{{-1,0},{0,-1},{0,1},{1,0}};
    public int numIslands(char[][] grid) {
        if(grid==null || grid.length==0 || grid[0]==null || grid[0].length==0)
            return 0;
        
        m = grid.length;
        n=grid[0].length;
        
        int res=0;
        
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(grid[i][j]=='1'){
                    dfs(grid, i, j);
                    res++;
                }
            }
        }
        return res;
    }
    
    private void dfs(char[][] grid, int x, int y){
        if(!isValid(grid, x, y))
            return;
        grid[x][y]='2';
        for(int i=0;i<4;i++){
            dfs(grid, x+direction[i][0], y+direction[i][1]);
        }
    }
    
    private boolean isValid(char[][] grid, int x, int y){
        if(x<0 || x>=m)
            return false;
        if(y<0 || y>=n)
            return false;
        if(grid[x][y]=='1')
            return true;
        return false;
    }
}
