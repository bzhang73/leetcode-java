class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        List<List<Integer>> res = new ArrayList<>();
        if(candidates==null || candidates.length==0)
            return res;
        
        Arrays.sort(candidates);
        dfs(candidates, target, 0, new ArrayList<Integer>(), res);
        
        return res;
    }
    
    private void dfs(int[] candidates, int target, int start, List<Integer> combination, List<List<Integer>> res){
        if(target==0){
            res.add(new ArrayList<Integer>(combination));
            return;
        }
        
        if(target<0)
            return;
        
        for(int i=start;i<candidates.length;i++){
            combination.add(candidates[i]);
            dfs(candidates, target-candidates[i], i, combination, res);
            combination.remove(combination.size()-1);
        }
    }
}
