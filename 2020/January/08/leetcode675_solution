class Solution {
    private int[][] direction = new int[][]{{-1,0},{0,-1},{0,1},{1,0}};
    private int m, n;
    public int cutOffTree(List<List<Integer>> forest) {
        m=forest.size();
        n=forest.get(0).size();
        PriorityQueue<int[]> queue = new PriorityQueue<int[]>((a,b)->(a[2]-b[2]));
        for(int i=0;i<m;i++)
            for(int j=0;j<n;j++)
                if(forest.get(i).get(j)>1)
                    queue.offer(new int[]{i,j,forest.get(i).get(j)});
        
        int x=0;
        int y=0;
        int res=0;
            
        while(!queue.isEmpty()){
            int[] temp = queue.poll();
            int distance = bfs(forest, x, y, temp[2]);
            if(distance<0)
                return distance;
            // System.out.println(distance);
            res+=distance;
            x=temp[0];
            y=temp[1];
        }
        return res;
    }
    
    private int bfs(List<List<Integer>> forest, int x, int y, int target){
        Queue<int[]> queue = new LinkedList<>();
        boolean[][] visited = new boolean[m][n];
        queue.add(new int[]{x,y});
        visited[x][y]=true;
        int step=0;
        while(!queue.isEmpty()){
            int size=queue.size();
            for(int k=0;k<size;k++){
                int[] temp = queue.poll();
                if(forest.get(temp[0]).get(temp[1])==target)
                    return step;
                for(int i=0;i<4;i++){
                    int tempx=temp[0]+direction[i][0];
                    int tempy=temp[1]+direction[i][1];
                    // System.out.println(tempx+" "+tempy+" "+step);
                    if(isValid(tempx, tempy, visited)){
                        if(forest.get(tempx).get(tempy)>0){
                            queue.offer(new int[]{tempx,tempy});
                            visited[tempx][tempy]=true;
                        }
                    }
                }
                // System.out.println(step+" "+target);
            }
            step++;
            
        }
        return -1;
    }
    
    private boolean isValid(int x, int y, boolean[][] visited){
        if(x<0 || x>=m)
            return false;
        if(y<0 || y>=n)
            return false;
        if(visited[x][y])
            return false;
        return true;
    }
}
