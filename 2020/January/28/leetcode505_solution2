class Solution {
    private int[][] dirct=new int[][]{{-1,0},{0,-1},{0,1},{1,0}};
    private int m,n;
    public int shortestDistance(int[][] maze, int[] start, int[] destination) {
        m=maze.length;
        n=maze[0].length;
        Queue<int[]> queue = new LinkedList<>();
        int[][] steps=new int[m][n];
        
        queue.offer(new int[]{start[0], start[1], 0});
        steps[start[0]][start[1]]=0;
        
        boolean istrue=false;
        int res=Integer.MAX_VALUE;
        
        while(!queue.isEmpty()){
            int size=queue.size();
            for(int j=0;j<size;j++){
                int[] temp =queue.poll();
                
                for(int i=0;i<4;i++){
                    int[] a = findDirection(maze, temp[0], temp[1], i);
                    if(a[0]==temp[0] && a[1]==temp[1])
                        continue;
                    if(a[0]==destination[0] && a[1]==destination[1]){
                        istrue=true;
                        res=Math.min(res, temp[2]+a[2]);
                    }
                    if(steps[a[0]][a[1]]==0 || steps[a[0]][a[1]]>a[2]+temp[2]){
                        steps[a[0]][a[1]]=temp[2]+a[2];
                        queue.offer(new int[]{a[0], a[1], temp[2]+a[2]});
                    }
                }
            }
            // System.out.println(size);
        }
        
        if(istrue)
            return res;
        return -1;
    }
    
    private int[] findDirection(int[][] maze, int x, int y, int direction){
        x=x+dirct[direction][0];
        y=y+dirct[direction][1];
        int count=0;
        while(isValid(maze, x, y)){
            x=x+dirct[direction][0];
            y=y+dirct[direction][1];
            count++;
        }
        x-=dirct[direction][0];
        y-=dirct[direction][1];
        return new int[]{x,y, count};
        
    }
    
    private boolean isValid(int[][] maze, int x, int y){
        if(x<0 || x>=m)
            return false;
        if(y<0 || y>=n)
            return false;
        if(maze[x][y]==1)
            return false;
        return true;
    }
}
