/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */

class TreeNode{
        int val;
        TreeNode left;
        TreeNode right;
        int position;
        TreeNode(int x){
            val=x;
        }
    }
class Solution {
    public int widthOfBinaryTree(TreeNode root) {
        if(root==null)
            return 0;
        
        root.position=0;
        int res=1;
        Queue<TreeNode> queue = new LinkedList<>();
        queue.offer(root);
        while(!queue.isEmpty()){
            int size=queue.size();
            int min=Integer.MAX_VALUE;
            int max=Integer.MIN_VALUE;
            for(int i=0;i<size;i++){
                TreeNode temp = queue.poll();
                min=Math.min(min, temp.position);
                max=Math.max(max, temp.position);
                if(temp.left!=null){
                    if(temp.position==0){
                        temp.left.position=temp.position-1;
                    }else if(temp.position<0){
                        temp.left.position=temp.position*2;
                    }else{
                        temp.left.position=temp.position*2-1;
                    }
                    queue.offer(temp.left);
                }
                
                if(temp.right!=null){
                    if(temp.position==0){
                        temp.right.position=temp.position+1;
                    }else if(temp.position<0){
                        temp.right.position=temp.position*2+1;
                    }else{
                        temp.right.position=temp.position*2;
                    }
                    queue.offer(temp.right);
                }
            }
            System.out.println(min+" "+max+" "+(max-min));
            if(max<0 || min>0)
                res=Math.max(res, max-min+1);
            else
                res=Math.max(res, max-min);
        }
        return res;
    }
}
