class Solution {
    public int maxDistance(int[][] grid) {
        Queue<int[] > queue = new LinkedList<>();
        int m=grid.length;
        int n=grid[0].length;
        for(int i=0;i<m;i++)
            for(int j=0;j<n;j++)
                if(grid[i][j]==1)
                    queue.offer(new int[]{i,j});
        if(queue.size()==0 || queue.size()==m*n)
            return -1;
        int[] dircx=new int[]{-1,0,0,1};
        int[] dircy=new int[]{0,-1,1,0};
        int res=1;
        while(!queue.isEmpty()){
            int size=queue.size();
            for(int i=0;i<size;i++){
                int[] temp = queue.poll();
                for(int j=0;j<4;j++){
                    int x = temp[0]+dircx[j];
                    int y = temp[1]+dircy[j];

                    if(isValid(grid,x,y)){
                        queue.offer(new int[]{x,y});
                        if(grid[x][y]==0)
                            grid[x][y]=res;
                    }
                }
            }
            res++;
        }
        return res-2;
    }
    
    private boolean isValid(int[][] grid, int x, int y){
        if(x<0 || x>=grid.length)
            return false;
        if(y<0 || y>=grid[0].length)
            return false;
        if(grid[x][y]!=0)
            return false;
        return true;
    }
}
