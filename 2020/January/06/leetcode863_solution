/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<Integer> distanceK(TreeNode root, TreeNode target, int K) {
        List<Integer> res = new ArrayList<>();
        findNode(root, target, K, res);
        return res;
    }
    
    private int findNode(TreeNode root, TreeNode target, int k, List<Integer> res){
        if(root==null)
            return -1;
        if(root.val==target.val){
            addRes(root,0,k,res);
            return 0;
        }
        
        int left=findNode(root.left, target, k, res);
        int right=findNode(root.right, target, k, res);
        int distance = Math.max(left,right)+1;
        
        if(distance>0){
            if(distance==k) 
                addRes(root, distance, k, res);
            if(left<0) 
                addRes(root.left, distance+1,k,res);
            if(right<0)
                addRes(root.right, distance+1,k,res);
        }
        return distance==0?-1:distance;
    }
    
    private void addRes(TreeNode root, int distance, int k, List<Integer> res ){
        if(root==null)
            return;
        if(distance==k){
            res.add(root.val);
            return;
        }
        addRes(root.left,distance+1,k,res);
        addRes(root.right,distance+1,k,res);
    }
    
}
