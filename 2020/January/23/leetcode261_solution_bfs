class Solution {
    public boolean validTree(int n, int[][] edges) {
        Set[] graph = new HashSet[n];
        for(int i=0;i<n;i++)
            graph[i]=new HashSet<Integer>();
        
        for(int i=0;i<edges.length;i++){
            graph[edges[i][0]].add(edges[i][1]);
            graph[edges[i][1]].add(edges[i][0]);
        }
        
        Queue<Integer> queue = new LinkedList<>();
        boolean[] visited = new boolean[n];
        visited[0]=true;
        queue.add(0);
        int count=1;
        
        while(!queue.isEmpty()){
            int temp = queue.poll();
            for(Object aa: graph[temp]){
                int a = (int)aa;
                if(visited[a])
                    return false;
                else{
                    graph[a].remove(temp);
                    // graph[]
                    visited[a]=true;
                    queue.add(a);
                    count++;
                }
            }
        }
        return count==n?true:false;
    }
}
