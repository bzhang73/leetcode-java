class Solution {
    private int res;
    public boolean canFinish(int numCourses, int[][] prerequisites) {
        int length = prerequisites.length;
        List[] request = new ArrayList[numCourses];
        int[] level = new int[numCourses];
        
        for(int i=0;i<numCourses;i++){
            request[i]=new ArrayList<Integer>();
        }
        
        for(int i=0;i<length;i++){
            level[prerequisites[i][0]]++;
            request[prerequisites[i][1]].add(prerequisites[i][0]);
        }
        
        res=0;
        
        Set<Integer> set = new HashSet<>();
        for(int i=0;i<numCourses;i++){
            if(level[i]==0 && !set.contains(i)){
                set.add(i);
                res++;
                dfs(request, level, i, set);
            }
        }
        return (res==numCourses)?true:false;
    }
    
    private void dfs(List[] request, int[] level, int course, Set<Integer> set){
        for(int i=0;i<request[course].size();i++){
            int next=(int)request[course].get(i);
            level[next]--;
            if(level[next]==0 && !set.contains(next)){
                res++;
                set.add(next);
                dfs(request, level, next, set);
            }
        }
    }
}
