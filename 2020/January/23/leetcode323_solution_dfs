class Solution {
    public int countComponents(int n, int[][] edges) {
        if(edges==null || edges.length==0 || edges[0]==null || edges[0].length==0)
            return n;
        List[] list = new ArrayList[n];
        for(int i=0;i<n;i++)
            list[i]=new ArrayList<>();
        for(int i=0;i<edges.length;i++){
            list[edges[i][0]].add(edges[i][1]);
            list[edges[i][1]].add(edges[i][0]);
        }
        
        boolean[] visited = new boolean[n];
        int res=0;
        for(int i=0;i<n;i++){
            if(!visited[i]){
                dfs(list, visited, i);
                res++;
            }
        }
        return res;
    }
    
    private void dfs(List[] list, boolean[] visited, int node){
        if(visited[node])
            return;
        visited[node]=true;
        for(Object a: list[node]){
            int next = (int)a;
            dfs(list, visited, next);
        }
    }
}
