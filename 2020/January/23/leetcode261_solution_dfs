class Solution {
    private int count;
    public boolean validTree(int n, int[][] edges) {
        Set[] graph = new HashSet[n];
        for(int i=0;i<n;i++)
            graph[i]=new HashSet<Integer>();
        
        for(int i=0;i<edges.length;i++){
            graph[edges[i][0]].add(edges[i][1]);
            graph[edges[i][1]].add(edges[i][0]);
        }
        
        count=0;
        boolean[] visited = new boolean[n];
       
        boolean res=dfs(graph, visited, 0, -1);
        // System.out.println(res+" "+count);
        if(!res)
            return res;
        return count==n?true:false;
    }
    
    private boolean dfs(Set[] graph, boolean[] visited, int node, int prev){
        // System.out.println(node+" "+visited[node]);
        if(visited[node])
            return false;
        // System.out.println("pass");
        visited[node]=true;
        count++;
        boolean res=true;
        for(Object a: graph[node]){
            int next =(int)a;
            if(next==prev)
                continue;
            res= res && dfs(graph, visited, next,node);
        }
        return res;    
    }
}
