class Solution {
    public void solve(char[][] board) {
        if(board==null || board.length==0 || board[0]==null || board[0].length==0)
            return;
        int m=board.length;
        int n=board[0].length;
        boolean[][] visited=new boolean[m][n];
        
        int[][] direction = new int[][]{{-1,0},{0,-1},{0,1},{1,0}};
        Queue<int[]> queue = new LinkedList<>();
        for(int i=0;i<m;i++){
            if(board[i][0]=='O'){
                queue.offer(new int[]{i,0});
                visited[i][0]=true;
            }
            
            if(board[i][n-1]=='O'){
                queue.offer(new int[]{i,n-1});
                visited[i][n-1]=true;
            }
        }
        
        for(int i=1;i<n-1;i++){
            if(board[0][i]=='O'){
                queue.offer(new int[]{0,i});
                visited[0][i]=true;
            }
            if(board[m-1][i]=='O'){
                queue.offer(new int[]{m-1,i});
                visited[m-1][i]=true;
            }
        }
        
        while(!queue.isEmpty()){
            int size=queue.size();
            for(int i=0;i<size;i++){
                int[] temp=queue.poll();
                for(int j=0;j<4;j++){
                    int tempx=temp[0]+direction[j][0];
                    int tempy=temp[1]+direction[j][1];
                    
                    if(tempx>=0 && tempx<m && tempy>=0 && tempy<n){
                        if(!visited[tempx][tempy] && board[tempx][tempy]=='O'){
                            queue.offer(new int[]{tempx,tempy});
                            visited[tempx][tempy]=true;
                        }
                    }
                }
            }
        }
        
        for(int i=1;i<m-1;i++){
            for(int j=1;j<n-1;j++){
                if(!visited[i][j] && board[i][j]=='O'){
                    board[i][j]='X';
                    visited[i][j]=true;
                }
            }
        }
        
    }
}
