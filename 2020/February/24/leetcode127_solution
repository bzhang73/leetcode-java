class Solution {
    public int ladderLength(String beginWord, String endWord, List<String> wordList) {
        if(wordList==null || wordList.size()==0 )
            return 0;
        Set<String> diction = new HashSet<>();
        Set<String> visited = new HashSet<>();
        for(String a : wordList)
            diction.add(a);
        
        Queue<String> queue = new LinkedList<>();
        queue.add(beginWord);
        visited.add(beginWord);
        int res =1;
        while(!queue.isEmpty()){
            int size = queue.size();
            for(int i=0;i<size;i++){
                String cur = queue.poll();
                if(cur.equals(endWord))
                    return res;
                List<String> next = getNext(diction, cur, visited);
                for(String a: next){
                    queue.offer(a);
                }
            }
            res++;
        }
        return 0;
        
    }
    
    private List<String> getNext(Set<String> set, String word, Set<String> visited){
        List<String> res = new ArrayList<>();
        for(int i=0;i<word.length();i++){
            for(char j='a';j<='z';j++){
                if(word.charAt(i)==j)
                    continue;
                String next = swap(word, i, j);
                if(set.contains(next) && !visited.contains(next)){
                    res.add(next);
                    visited.add(next);
                }
                    
            }
        }
        return res;
    }
    
    private String swap(String word, int index, char a){
        char[] sc = word.toCharArray();
        sc[index]=a;
        return new String(sc);
    }
}
