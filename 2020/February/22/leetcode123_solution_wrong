class Solution {
    public int maxProfit(int[] prices) {
        if(prices==null || prices.length<2)
            return 0;
        int n = prices.length;
        PriorityQueue<Integer> queue = new PriorityQueue<Integer>((a,b)->(b-a));
        int max=0;
        int min=prices[0];
        
        for(int i=0;i<n;i++){
            if(prices[i]>=min){
                max = Math.max(max, prices[i]-min);
            }else{
                queue.offer(max);
                max=0;
                min=prices[i];
            }
        }
        queue.offer(max);
        
        int count=0;
        int res=0;
        while(count<2 && !queue.isEmpty()){
            res+=queue.poll();
            count++;
        }
        return res;
    }
}
