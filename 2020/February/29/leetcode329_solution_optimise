class Solution {
    private int m,n;
    public int longestIncreasingPath(int[][] matrix) {
        if(matrix==null || matrix.length==0 || matrix[0]==null || matrix[0].length==0)
            return 0;
        
        m = matrix.length;
        n = matrix[0].length;
        
        int[][] dp = new int[m][n];
        int[] res = new int[1];
        
        for(int i=0;i<m;i++)
            for(int j=0;j<n;j++)
                dfs(matrix, dp, i, j, 1, res);

        
        return res[0];
    }
    
    private void dfs(int[][] matrix, int[][] dp, int x, int y, int step, int[] res){
        if(x<0 || x>m || y<0 || y>=n || dp[x][y]>=step)
            return;
        
        dp[x][y]=step;
        res[0] = Math.max(res[0], dp[x][y]);
        if(x>0 && matrix[x][y] < matrix[x-1][y])
            dfs(matrix, dp, x-1, y, step+1, res);
        if(x<m-1 && matrix[x][y] < matrix[x+1][y])
            dfs(matrix, dp, x+1, y, step+1, res);
        if(y>0 && matrix[x][y] < matrix[x][y-1])
            dfs(matrix, dp, x, y-1, step+1, res);
        if(y<n-1 && matrix[x][y] < matrix[x][y+1])
            dfs(matrix, dp, x, y+1, step+1, res);
    }
}
