class Solution {
    public int stoneGameII(int[] piles) {
        int[] sum = new int[piles.length];
        for(int i=sum.length-1;i>=0;i--)
            sum[i] += (i+1<sum.length? sum[i+1]: 0)+piles[i];
        int[][] mem = new int[sum.length][2*sum.length];
        return helper(piles,0,1,mem,sum);
    }
    
    int helper(int[] p, int index, int M, int[][] mem, int[] sum){
        if(index==p.length)
            return 0;
        if(p.length-index<=2*M)
            return sum[index];
        if(mem[index][M]!=0)
            return mem[index][M];
        
        int min = Integer.MAX_VALUE;
        for(int i=1;i<=2*M;i++)
            min = Math.min(min, helper(p, index+i, Math.max(M,i), mem, sum));
        mem[index][M]=sum[index]-min;
        return mem[index][M];
    }
}
