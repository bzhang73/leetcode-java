class Solution {
    public int cherryPickup(int[][] grid) {
        if(grid.length==1)
            return grid[0][0]==1?1:0;
        int n=grid.length;
        
        boolean valid  = path(grid,n);
        if(!valid)
            return 0;
        
        int[][] pick = new int[n][n];
        pick[0][0]=grid[0][0];
        for(int i=1;i<n;i++)
            if(grid[i][0]==-1)
                break;
            else
                pick[i][0]=pick[i-1][0] + grid[i][0];
        
        for(int i=1;i<n;i++)
            if(grid[0][1]==-1)
                break;
            else
                pick[0][i]=pick[0][i-1] + grid[0][i];
        
        for(int i=1;i<n;i++){
            for(int j=1;j<n;j++){
                if(grid[i][j]==-1)
                    continue;
                pick[i][j]=Math.max(pick[i-1][j], pick[i][j-1])+grid[i][j];
            }
        }
        
        int res=pick[n-1][n-1];
        
        bfs(pick, grid, n-1, n-1);
        
        pick=new int[n][n];
        for(int i=n-2;i>=0;i--)
            if(pick[i][0]==-1)
                break;
            else
                pick[i][0]= pick[i+1][0] + grid[i][0];
        
        for(int i=n-2;i>=0;i--)
            if(pick[0][i]==-1)
                break;
            else
                pick[0][i]= pick[0][i+1] + grid[i][0];
        
        for(int i=n-2;i>=0;i--){
            for(int j=n-2;j>=0;j--){
                if(grid[i][j]==-1)
                    continue;
                pick[i][j]= Math.max(pick[i+1][j], pick[i][j+1])+grid[i][j];
            }
        }
        // System.out.println(res);
        res+=pick[0][0];
        
        return res;
    }
    
    private boolean path(int[][] grid,int n){
        Queue<int[] > queue = new LinkedList<>();
        queue.offer(new int[]{0,0});
        while(!queue.isEmpty()){
            int size=queue.size();
            for(int i=0;i<size;i++){
                int[] temp =queue.poll();
                if(temp[0]==n-1 && temp[1]==n-1)
                    return true;
                
                if(temp[0]+1<n){
                    if(grid[temp[0]+1][temp[1]]!=-1)
                        queue.offer(new int[]{temp[0]+1, temp[1]});
                }
                
                if(temp[1]+1<n){
                    if(grid[temp[0]][temp[1]+1] !=-1){
                        queue.offer(new int[]{temp[0], temp[1]+1});
                    }
                }
            }
        }
        return false;
    }
    
    private void bfs(int[][] pick, int[][] grid, int x, int y){
        Queue<int[]> queue = new LinkedList<>();
        queue.offer(new int[]{x,y, pick[x][y]});
        while(!queue.isEmpty()){
            int size=queue.size();
            for(int i=0;i<size;i++){
                int[] temp=queue.poll();
                boolean up=false;
                boolean left=false;
                
                if(temp[0]==0 && temp[1]==0)
                    break;
                
                if(temp[0]>0){
                    if(pick[temp[0]-1][temp[1]] == pick[temp[0]][temp[1]]-grid[temp[0]][temp[1]]){
                        queue.offer(new int[]{temp[0]-1, temp[1], pick[temp[0]-1][temp[1]]});
                    }
                }
                
                if(temp[1]>0){
                    if(pick[temp[0]][temp[1]-1] == pick[temp[0]][temp[1]]-grid[temp[0]][temp[1]]){
                        queue.offer(new int[]{temp[0], temp[1]-1, pick[temp[0]][temp[1]-1]});
                    }
                }
                
                if(size==1)
                    grid[temp[0]][temp[1]]=0;
            }
        }
    }
}
