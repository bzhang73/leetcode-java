class Solution {
    public int cherryPickup(int[][] grid) {
       int n=grid.length;
        int[][] dp = new int[n+1][n+1];
        int range = 2*n-1;
        
        for(int i=0;i<range;i++){
            int x1=Math.min(i,n-1);
            int y1=Math.max(0,i-n+1);
            
            int dist=(i<n? i+1:range-i);
            int[][] nextDp=new int[n+1][n+1];
            int z= i>=n? 1:0;
            
            for(int d1=0; d1<dist; d1++){
                int x2=x1;
                int y2=y1;
                if(!(x1+y1==0) && ((y1==0 || grid[y1-1][x1]==-1) && (x1==0 || grid[y1][x1-1]==-1))){
                    grid[y1][x1]=-1;
                }
                
                if(grid[y1][x1]!=-1){
                    for(int d2=d1; d2<dist;d2++){
                        if(grid[y2][x2]!=-1){
                            int v1=(x2==0 || x1==0)?0:dp[d1+z][d2+z];
                            int v2=(y2==0 || y1==0)?0:dp[d1-1+z][d2-1+z];
                            int v3=(x1==0 || y2==0)?0:dp[d1+z][d2-1+z];
                            int v4=(y1==0 || x2==0)?0:dp[d1-1+z][d2+z];
                            
                            nextDp[d1][d2]=Math.max(Math.max(v1,v2),Math.max(v3,v4));
                            nextDp[d1][d2]+=(x1==x2 && y1==y2)?grid[y1][x1]: grid[y1][x1]+grid[y2][x2];
                            
                        }
                        
                        x2--;
                        y2++;
                    }
                }
                x1--;
                y1++;
            }
            dp=nextDp;
        }
        return dp[0][0];
    }
}
