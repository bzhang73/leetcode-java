class Solution {
    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> res = new ArrayList<>();
        Set<Integer> set = new HashSet<>();
        Set<Integer> all = new HashSet<>();
        for(int a: nums){
            set.add(a);
            all.add(a);
        }
        dfs(set, all, new ArrayList<Integer>(), res);
        return res;
    }
    
    private void dfs(Set<Integer> set, Set<Integer> all, List<Integer> list, List<List<Integer>> res){
        if(set.isEmpty()){
            res.add(new ArrayList<Integer>(list));
            return;
        }
        for(int a: all){
            if(!set.contains(a)){
                continue;
            }
            list.add(a);
            set.remove(a);
            dfs(set, all, list, res);
            set.add(a);
            list.remove(list.size()-1);
        }
    }
}
