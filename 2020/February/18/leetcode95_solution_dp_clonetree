/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<TreeNode> generateTrees(int n) {
        List<TreeNode>[] dp = new ArrayList[n+1];
        dp[0] = new ArrayList<TreeNode>();
        if(n==0)
            return dp[0];
        dp[0].add(null);
        
        for(int i=1;i<=n;i++){
            dp[i]=new ArrayList<TreeNode>();
            
            for(int root=1; root<=i;root++){
                int left = root-1;
                int right = i-root;
                for(TreeNode leftTree: dp[left]){
                    for(TreeNode rightTree: dp[right]){
                        TreeNode treeRoot = new TreeNode(root);
                        treeRoot.left = leftTree;
                        
                        //clone left + activation
                        treeRoot.right = clone(rightTree, root);
                    
                        dp[i].add(treeRoot);
                    }
                }
            }
        }
        return dp[n];
    }
    
    private TreeNode clone(TreeNode n, int offset){
        if(n==null)
            return null;
        TreeNode node = new TreeNode(n.val+offset);
        node.left = clone(n.left,offset);
        node.right = clone(n.right, offset);
        return node;
    }
}
