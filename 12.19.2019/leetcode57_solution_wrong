class Solution {
    public int[][] insert(int[][] intervals, int[] newInterval) {
        if(intervals==null || intervals.length==0){
            return new int[][]{{newInterval[0],newInterval[1]}};
        }
        Queue<int[]> queue = new LinkedList<int[]>();
        int[] current = new int[2];
        current[0]=intervals[0][0];
        current[1]=intervals[0][1];
        
        
        if(intervals.length==1){
            
        }
        
        for(int i=1;i<intervals.length;i++){
            if(newInterval[0]>current[1] ){
                //
            }else{
                current[1]=Math.max(newInterval[1],current[1]);
            }
            
            if(current[1]>=intervals[i][0]){
                current[1]=Math.max(current[1],intervals[i][1]);
            }else{
                queue.add(new int[]{current[0],current[1]});
                current[0]=intervals[i][0];
                current[1]=intervals[i][1];
            }
            
        }
        queue.add(new int[]{current[0],current[1]});
        
        int size=queue.size();
        
        int[][] res = new int[size][2];
        for(int i=0;i<size;i++){
            int[] temp = queue.poll();
            res[i][0] = temp[0];
            res[i][1] = temp[1];
        }
        return res;
    }
}
