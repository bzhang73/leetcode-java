class Solution {
    public int leastInterval(char[] tasks, int n) {
        if(tasks.length==0)
            return 0;
        if(n==0)
            return tasks.length;
        
        Map<Character,Integer> map=new HashMap<>();
        PriorityQueue<Integer> queue = new PriorityQueue<>((i1,i2)->i2-i1);
        
        for(char a: tasks){
            map.putIfAbsent(a,0);
            map.put(a,map.get(a)+1);
        }
        
        
        for(char a:map.keySet())
            queue.offer(map.get(a));
        
        int time=0;
        int last=0;
        while(queue.size()!=0){
            time++;
            int size =(queue.size()>(n+1))?n+1:queue.size();
            last=size;
            Queue<Integer> queue2 = new LinkedList<>();
            for(int i=0;i<size;i++){
                int temp=queue.poll();
                System.out.print(temp+" ");
                if(temp==1)
                    continue;
                queue2.offer(temp-1);
            }
            while(!queue2.isEmpty())
                queue.offer(queue2.poll());
            
        }
        int res=(time-1)*(n+1)+last;
        return res;
    }
}
