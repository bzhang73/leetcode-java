class Solution {
    public int maximumMinimumPath(int[][] A) {
        int m=A.length;
        int n=A[0].length;
        
        PriorityQueue<int[] > queue=new PriorityQueue<int[]>((a,b)->b[2]-a[2]);
        queue.offer(new int[]{0,0,A[0][0]});
        while(!queue.isEmpty()){
            int[] temp=queue.poll();
            if(temp[0]==m-1 && temp[1]==n-1)
                return temp[2];
            int x=temp[0];
            int y=temp[1];
            if(x<m-1 && A[x][y]!=-1)
                queue.offer(new int[]{x+1,y,Math.min(temp[2],A[x+1][y])});
            if(y<n-1 && A[x][y]!=-1)
                queue.offer(new int[]{x,y+1,Math.min(temp[2],A[x][y+1])});
            if(x>0 && A[x][y]!=-1)
                queue.offer(new int[]{x-1,y,Math.min(temp[2],A[x-1][y])});
            if(y>0 && A[x][y]!=-1)
                queue.offer(new int[]{x,y-1,Math.min(temp[2],A[x][y-1])});
            A[x][y]=-1;
        }
        return -1;
    }
}
