class Solution {
    private int m,n;
    private int[][] direction=new int[][]{{-1,0},{0,1},{0,-1},{1,0}};
    public int numIslands(char[][] grid) {
        if(grid==null || grid.length==0 || grid[0]==null || grid[0].length==0)
            return 0;
        m=grid.length;
        n=grid[0].length;
        int res=0;
        
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(isValid(grid,i,j)){
                    bfs(grid,i,j);
                    res++;
                }
            }
        }
        return res;
    }
    
    private boolean isValid(char[][] grid, int row, int col){
        if(row<0 || row>=m || col<0 || col>=n)
            return false;
        if(grid[row][col]=='0')
            return false;
        if(grid[row][col]=='2')
            return false;
        return true;
    }
    
    private void bfs(char[][] grid, int row, int col){
        Queue<int[] > queue=new LinkedList<>();
        queue.offer(new int[]{row,col});
        grid[row][col]='2';
        while(!queue.isEmpty()){
            int[] temp=queue.poll();
            for(int i=0;i<4;i++){
                int x=temp[0]+direction[i][0];
                int y=temp[1]+direction[i][1];
                
                if(isValid(grid,x,y)){
                    queue.offer(new int[]{x,y});
                    grid[x][y]='2';
                }
            }
        }
    }
}
