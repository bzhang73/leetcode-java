class Solution {
    public int orangesRotting(int[][] grid) {
        int m=grid.length;
        int n=grid[0].length;
        boolean[][] time=new boolean[m][n];
        
        Queue<int[]> queue=new LinkedList<>();
        int[] tempx=new int[]{-1,0,0,1};
        int[] tempy=new int[]{0,-1,1,0};
        int count=0;
        for(int i=0;i<m;i++)
            for(int j=0;j<n;j++){
                if(grid[i][j]==1)
                    count++;
                else if(grid[i][j]==2){
                    queue.offer(new int[]{i,j});
                    time[i][j]=true;
                }
            }
        if(count==0)
            return 0;
        int res=0;
        while(!queue.isEmpty()){
            res++;
            int size=queue.size();
            for(int i=0;i<size;i++){
                int[] temp=queue.poll();
                for(int k=0;k<4;k++){
                    int x=temp[0]+tempx[k];
                    int y=temp[1]+tempy[k];
                    
                    if(isValid(grid,x,y,time)){
                        queue.offer(new int[]{x,y});
                        time[x][y]=true;
                        count--;
                    }
                }
            }
        }
        
        if(count>0)
            return -1;
        return res-1;
    }
    
    private boolean isValid(int[][] grid, int row, int col, boolean[][] time){
        if(row<0 || row>=grid.length || col<0 || col>=grid[0].length)
            return false;
        if(grid[row][col]!=1)
            return false;
        if(time[row][col])
            return false;
        return true;
    }
}
