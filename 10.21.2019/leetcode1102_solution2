class Solution {
    public int maximumMinimumPath(int[][] A) {
        int m=A.length;
        int n=A[0].length;
        
        PriorityQueue<int[]> queue = new PriorityQueue<int[]>((a,b)->b[2]-a[2]);
        queue.offer(new int[]{0,0,A[0][0]});
        while(!queue.isEmpty()){
            int[] temp=queue.poll();
            int row=temp[0];
            int col=temp[1];
            if(row==m-1 && col==n-1)
                return temp[2];
            if(row+1<m &&A[row][col]!=-1)
                queue.offer(new int[]{row+1,col,Math.min(temp[2],A[row+1][col])});
            if(row-1>=0 &&A[row][col]!=-1)
                queue.offer(new int[]{row-1,col,Math.min(temp[2],A[row-1][col])});
            if(col+1<n &&A[row][col]!=-1)
                queue.offer(new int[]{row,col+1,Math.min(temp[2],A[row][col+1])});
            if(col-1>=0 &&A[row][col]!=-1)
                queue.offer(new int[]{row,col-1,Math.min(temp[2],A[row][col-1])});
            A[row][col]=-1;
        }
        return -1;
    }
}
