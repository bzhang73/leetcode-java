/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
        if(lists.length ==0){
            return null;
        }
        
        return megerKhelper(lists,0,lists.length-1);
    }
    
    private ListNode megerKhelper(ListNode[] lists,int start, int end){
        if(start==end){
            return lists[start];
        }
        
        int mid = (end-start)/2+start;
        ListNode left = megerKhelper(lists,start,mid);
        ListNode right = megerKhelper(lists,mid+1,end);
        
        return mergeTwoLists(left,right);
    }
    
    private ListNode mergeTwoLists(ListNode list1,ListNode list2){
        ListNode dummy = new ListNode(0);
        ListNode tail = dummy;
        
        while(list1!=null && list2!=null){
            if(list1.val < list2.val){
                tail.next= list1;
                tail= list1;
                list1=list1.next;
            }else {
                tail.next = list2;
                tail=tail.next;
                list2=list2.next;
            }
            
            
        }
        
        if(list1!=null){
            tail.next = list1;
        }else{
            tail.next = list2;
        }
        
        return dummy.next;
    }
}
