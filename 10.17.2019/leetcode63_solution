class Solution {
    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        if(obstacleGrid.length==0 || obstacleGrid[0].length==0)
            return 0;
        int m=obstacleGrid.length;
        int n=obstacleGrid[0].length;
        if (obstacleGrid[m-1][n-1]==1 || obstacleGrid[0][0]==1)
                return 0;
        
        int[][] res = new int[m][n];
        res[0][0]=1;
        for(int i=1;i<m;i++)
            if(obstacleGrid[i][0]==1)
                break;
            else
                res[i][0]=1;
        for(int j=0;j<n;j++)
            if(obstacleGrid[0][j]==1)
                break;
            else
                res[0][j]=1;
        
        for(int i=1;i<m;i++)
            for(int j=1;j<n;j++)
                if(obstacleGrid[i-1][j]==1 && obstacleGrid[i][j-1]==1)
                    res[i][j]=0;
                else if(obstacleGrid[i-1][j]==1 && obstacleGrid[i][j-1]!=1)
                    res[i][j]=res[i][j-1];
                else if(obstacleGrid[i-1][j]!=1 && obstacleGrid[i][j-1]==1)
                    res[i][j]=res[i-1][j];
                else
                    res[i][j]=res[i-1][j]+res[i][j-1];
        return res[m-1][n-1];
    }
}
