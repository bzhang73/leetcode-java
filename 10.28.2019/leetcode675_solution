class Solution {
    private int[][] direc=new int[][]{{-1,0},{0,-1},{0,1},{1,0}};
    private int m,n;
    public int cutOffTree(List<List<Integer>> forest) {
        PriorityQueue<int[]> queue=new PriorityQueue<int[]>((a,b)->a[2]-b[2]);
        m=forest.size();
        n=forest.get(0).size();
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                int height=forest.get(i).get(j);
                if(height>1)
                    queue.add(new int[]{i,j,height});
            }
        }
    
    
        int res=0;
        int x=0;
        int y=0;
    
        while(!queue.isEmpty()){
            int[] tree=queue.poll();
            int dist=bfs(forest,x,y,tree[2]);
            if(dist<0)
                return dist;
            res+=dist;
            x=tree[0];
            y=tree[1];
        }
        
        return res;
    }
    
    private int bfs(List<List<Integer>> forest,int x, int y, int target){
        Queue<int[]> queue=new LinkedList<>();
        boolean[][] visited=new boolean[m][n];
        queue.add(new int[]{x,y});
        visited[x][y]=true;
        
        int step=0;
        while(!queue.isEmpty()){
            int size=queue.size();
            for(int i=0;i<size;i++){
                int[] temp=queue.poll();
                if(forest.get(temp[0]).get(temp[1])==target)
                    return step;
                
                for(int j=0;j<4;j++){
                    int tempx=temp[0]+direc[j][0];
                    int tempy=temp[1]+direc[j][1];
                    
                    if(tempx>=0 && tempx<m && tempy>=0 && tempy<n && !visited[tempx][tempy]){
                        if(forest.get(tempx).get(tempy)>0){
                            visited[tempx][tempy]=true;
                            queue.offer(new int[]{tempx,tempy});
                        }
                    }
                }
            }
            step++;
        }
        return -1;
    }
}
