class Solution {
    public List<List<Integer>> criticalConnections(int n, List<List<Integer>> connections) {
        List<Integer>[] graph = new ArrayList[n];
        for(int i=0;i<n;i++)
            graph[i]=new ArrayList<>();
        buildGraph(graph,connections);
        
        List<List<Integer>> res=new ArrayList<>();
        
        boolean[] visited=new boolean[n];
        int[] order=new int[n];
        int[] unique=new int[1];
        dfs(graph,-1,0,visited,order,unique,res);
        return res;
    }
    
    private void dfs(List<Integer>[] graph, int pre,int src, boolean[] visited, int[] order, int[] unique, List<List<Integer>> res){
        visited[src]=true;
        order[src]=unique[0]++;
        int origi=order[src];
        for(int neighbor: graph[src]){
            if(neighbor==pre)
                continue;
            if(!visited[neighbor])
                dfs(graph,src,neighbor,visited,order,unique,res);
            order[src]=Math.min(order[src],order[neighbor]);
            if(origi<order[neighbor])
                res.add(Arrays.asList(src, neighbor));
        }
    }
    
    private void buildGraph(List<Integer>[] graph,List<List<Integer>> connections){
        for(List<Integer> list: connections){
            int node0=list.get(0);
            int node1=list.get(1);
            graph[node0].add(node1);
            graph[node1].add(node0);
        }
    }
}
