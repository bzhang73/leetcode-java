class Solution {
    public List<List<Integer>> combinationSum3(int k, int n) {
        List<List<Integer>> res=new ArrayList<>();
        if(k==0 || n<0)
            return res;
        int[] nums=new int[9];
        for(int i=0;i<9;i++)
            nums[i]=i+1;
        
        dfs(nums,0,new ArrayList<Integer>(),n,res, k);
        return res;
    }
    
    private void dfs(int[] nums,int start, List<Integer> combination, int target, List<List<Integer>> res, int length){
        if(target==0 && combination.size()==length){
            res.add(new ArrayList<Integer>(combination));
            return ;
        }
        
        for(int i=start;i<nums.length;i++){
            if(nums[i]>target)
                continue;
            combination.add(nums[i]);
            dfs(nums,i+1,combination,target-nums[i],res,length);
            combination.remove(combination.size()-1);
        }
    }
}
