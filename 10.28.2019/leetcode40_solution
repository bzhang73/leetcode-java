class Solution {
    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        List<List<Integer>> res=new ArrayList<>();
        if(candidates.length==0)
            return res;
        
        Arrays.sort(candidates);
        dfs(candidates,0,new ArrayList<Integer>(),target,res);
        return res;
    }
    
    private void dfs(int[] candidates, int start, List<Integer> combination, int target, List<List<Integer>> res){
        if(target==0){
            res.add(new ArrayList<Integer>(combination));
            return;
        }
        
        for(int i=start;i<candidates.length;i++){
            if(i!=start && candidates[i]==candidates[i-1])
                continue;
            
            if(candidates[i]>target)
                break;
            
            combination.add(candidates[i]);
            dfs(candidates,i+1,combination,target-candidates[i],res);
            combination.remove(combination.size()-1);
        }
    }
}
