class Solution {
    public double knightProbability(int N, int K, int r, int c) {
        // Queue<Integer> queuex=new LinkedList<>();
        // Queue<Integer> queuey=new LinkedList<>();
        
        int[] adjx={-2,-2,-1,-1,1,1,2,2};
        int[] adjy={-1,1,-2,2,-2,2,-1,1};
        
        double[][] board=new double[N][N];
        for(int i=0;i<N;i++)
            for(int j=0;j<N;j++)
                board[i][j]=1;
        
        double total=1.0;
        for(int m=0;m<K;m++){
            double[][] temp=new double[N][N];
            for(int i=0;i<N;i++){
                for(int j=0;j<N;j++){
                    for(int l=0;l<8;l++){
                        int tempx=i+adjx[l];
                        int tempy=j+adjy[l];
                        if(isValid(N,tempx,tempy)){
                            temp[tempx][tempy]+=board[i][j];
                        }
                    }
                }
            }
            board=temp;
            total*=8;
        }
        
        return board[r][c]/total;
    }
    
    public boolean isValid(int N, int r,int c){
        if(r<0||r>=N || c<0 || c>=N)
            return false;
        
        return true;
    }
}
