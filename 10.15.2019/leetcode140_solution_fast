class Solution {
    private int largest;
    public List<String> wordBreak(String s, List<String> wordDict) {
        List<String> res = new ArrayList<>();
        if(s.length()==0 || wordDict.size()==0)
            return res;
        
        Set<String> set = new HashSet<>();
        for(String a: wordDict)
            set.add(a);
        
        findString(0,s,set,"",res,new boolean[s.length()+1]);
        
        return res;
    }
    
    private boolean findString(int left, String s, Set<String> diction, String prev, List<String> res, boolean[] invalid){
        if(left>=s.length()){
            res.add(prev.trim());
            return true;
        }
        
        boolean possible = false;
        
        for(int i=left+1;i<=s.length();i++){
            if(invalid[i])
                continue;
            String substring=s.substring(left,i);
            
            if(diction.contains(substring)){
                boolean flag=findString(i,s,diction,prev+substring+" ",res, invalid);
                possible=flag||possible;
            }
        }
        
        invalid[left]=!possible;
        return possible;
    }
}
