class Solution {
    public List<List<Integer>> palindromePairs(String[] words) {
        Map<String,Integer> map = new HashMap<>();
        List<List<Integer>> results = new ArrayList<>();
        if(words==null || words.length<2)
            return results;
        for(int i=0;i<words.length;i++) 
            map.put(words[i],i);
        for(int i=0;i<words.length;i++){
            for(int j=0;j<=words[i].length();j++){
                String str1 = words[i].substring(0,j);
                String str2 = words[i].substring(j);
                // System.out.println(i );
                // System.out.println(str1 + " " + str2 );
                if(isPalindrome(str1)){
                    String strves = new StringBuilder(str2).reverse().toString();
                    if(map.containsKey(strves) && map.get(strves)!=i){
                        List<Integer> list = new ArrayList<>();
                        list.add(map.get(strves));
                        list.add(i);
                        results.add(list);
                    }
                }
                if(isPalindrome(str2)){
                    String strves = new StringBuilder(str1).reverse().toString();
                    if(map.containsKey(strves) && map.get(strves)!=i && str2.length()!=0){
                        List<Integer> list = new ArrayList<>();
                        list.add(i);
                        list.add(map.get(strves));
                        results.add(list);
                    }
                }
            }
            
        }
        return results;
    }
    
    private boolean isPalindrome(String word){
        int left=0;
        int right=word.length()-1;
        
        while(left<right){
            if(word.charAt(left)!=word.charAt(right)){
                return false;
            }
            ++left;
            --right;
        }
        return true;
    }
}
